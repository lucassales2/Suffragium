// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.trinus.suffragium.di;

import com.trinus.suffragium.manager.AppManagers;
import com.trinus.suffragium.manager.LeakCanaryManager;
import com.trinus.suffragium.manager.TimberManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideAppManagersFactory implements Factory<AppManagers> {
  private final AppModule module;

  private final Provider<LeakCanaryManager> leakCanaryManagerProvider;

  private final Provider<TimberManager> timberManagerProvider;

  public AppModule_ProvideAppManagersFactory(
      AppModule module,
      Provider<LeakCanaryManager> leakCanaryManagerProvider,
      Provider<TimberManager> timberManagerProvider) {
    this.module = module;
    this.leakCanaryManagerProvider = leakCanaryManagerProvider;
    this.timberManagerProvider = timberManagerProvider;
  }

  @Override
  public AppManagers get() {
    return Preconditions.checkNotNull(
        module.provideAppManagers(leakCanaryManagerProvider.get(), timberManagerProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<AppManagers> create(
      AppModule module,
      Provider<LeakCanaryManager> leakCanaryManagerProvider,
      Provider<TimberManager> timberManagerProvider) {
    return new AppModule_ProvideAppManagersFactory(
        module, leakCanaryManagerProvider, timberManagerProvider);
  }
}
